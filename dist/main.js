(()=>{"use strict";var r={426:(r,n,t)=>{t.d(n,{Z:()=>s});var e=t(15),i=t.n(e),o=t(645),a=t.n(o)()(i());a.push([r.id,':root {\r\n\t--accent: #5fb8de;\r\n\t--valid: #59de7c;\r\n\t--invalid: #ff3b52;\r\n}\r\n\r\n* {\r\n\tbox-sizing: border-box;\r\n\tfont-family: "Open Sans", sans-serif;\r\n}\r\n\r\nhtml,\r\nbody {\r\n\tmargin: 0;\r\n\theight: 100%;\r\n\twidth: 100%;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n}\r\n\r\n.input-container {\r\n\tdisplay: flex;\r\n\twidth: 100%;\r\n\tmargin-bottom: 1rem;\r\n\tposition: relative;\r\n}\r\n\r\nform {\r\n\twidth: 80%;\r\n}\r\n\r\n.icon {\r\n\tpadding: 1rem;\r\n\twidth: 3rem;\r\n\tbackground: var(--accent);\r\n\tcolor: white;\r\n\ttext-align: center;\r\n\tborder-radius: 8px 0 0 8px;\r\n}\r\n\r\n.status-valid {\r\n\tvisibility: hidden;\r\n\tposition: absolute;\r\n\tright: 1rem;\r\n\ttop: 1rem;\r\n\tcolor: var(--valid);\r\n}\r\n\r\n.status-invalid {\r\n\tvisibility: hidden;\r\n\tposition: absolute;\r\n\tright: 1rem;\r\n\ttop: 1rem;\r\n\tcolor: var(--invalid);\r\n}\r\n\r\n.input-field {\r\n\twidth: 100%;\r\n\tpadding: 10px;\r\n\toutline: none;\r\n\tborder: 2px solid lightgray;\r\n\tborder-left: 2px solid transparent;\r\n\tborder-radius: 0 8px 8px 0;\r\n}\r\n\r\n.input-field:focus {\r\n\tborder: 2px solid var(--accent);\r\n\tborder-left: 2px solid transparent;\r\n}\r\n\r\n#submit {\r\n\tbackground: var(--accent);\r\n\tcolor: white;\r\n\tborder: none;\r\n\tpadding: 1rem;\r\n\tcursor: pointer;\r\n\twidth: 100%;\r\n\topacity: 0.9;\r\n\tborder-radius: 8px;\r\n}\r\n\r\n#submit:hover {\r\n\topacity: 1;\r\n}\r\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;CACC,iBAAiB;CACjB,gBAAgB;CAChB,kBAAkB;AACnB;;AAEA;CACC,sBAAsB;CACtB,oCAAoC;AACrC;;AAEA;;CAEC,SAAS;CACT,YAAY;CACZ,WAAW;CACX,aAAa;CACb,sBAAsB;CACtB,uBAAuB;CACvB,mBAAmB;AACpB;;AAEA;CACC,aAAa;CACb,WAAW;CACX,mBAAmB;CACnB,kBAAkB;AACnB;;AAEA;CACC,UAAU;AACX;;AAEA;CACC,aAAa;CACb,WAAW;CACX,yBAAyB;CACzB,YAAY;CACZ,kBAAkB;CAClB,0BAA0B;AAC3B;;AAEA;CACC,kBAAkB;CAClB,kBAAkB;CAClB,WAAW;CACX,SAAS;CACT,mBAAmB;AACpB;;AAEA;CACC,kBAAkB;CAClB,kBAAkB;CAClB,WAAW;CACX,SAAS;CACT,qBAAqB;AACtB;;AAEA;CACC,WAAW;CACX,aAAa;CACb,aAAa;CACb,2BAA2B;CAC3B,kCAAkC;CAClC,0BAA0B;AAC3B;;AAEA;CACC,+BAA+B;CAC/B,kCAAkC;AACnC;;AAEA;CACC,yBAAyB;CACzB,YAAY;CACZ,YAAY;CACZ,aAAa;CACb,eAAe;CACf,WAAW;CACX,YAAY;CACZ,kBAAkB;AACnB;;AAEA;CACC,UAAU;AACX",sourcesContent:[':root {\r\n\t--accent: #5fb8de;\r\n\t--valid: #59de7c;\r\n\t--invalid: #ff3b52;\r\n}\r\n\r\n* {\r\n\tbox-sizing: border-box;\r\n\tfont-family: "Open Sans", sans-serif;\r\n}\r\n\r\nhtml,\r\nbody {\r\n\tmargin: 0;\r\n\theight: 100%;\r\n\twidth: 100%;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n}\r\n\r\n.input-container {\r\n\tdisplay: flex;\r\n\twidth: 100%;\r\n\tmargin-bottom: 1rem;\r\n\tposition: relative;\r\n}\r\n\r\nform {\r\n\twidth: 80%;\r\n}\r\n\r\n.icon {\r\n\tpadding: 1rem;\r\n\twidth: 3rem;\r\n\tbackground: var(--accent);\r\n\tcolor: white;\r\n\ttext-align: center;\r\n\tborder-radius: 8px 0 0 8px;\r\n}\r\n\r\n.status-valid {\r\n\tvisibility: hidden;\r\n\tposition: absolute;\r\n\tright: 1rem;\r\n\ttop: 1rem;\r\n\tcolor: var(--valid);\r\n}\r\n\r\n.status-invalid {\r\n\tvisibility: hidden;\r\n\tposition: absolute;\r\n\tright: 1rem;\r\n\ttop: 1rem;\r\n\tcolor: var(--invalid);\r\n}\r\n\r\n.input-field {\r\n\twidth: 100%;\r\n\tpadding: 10px;\r\n\toutline: none;\r\n\tborder: 2px solid lightgray;\r\n\tborder-left: 2px solid transparent;\r\n\tborder-radius: 0 8px 8px 0;\r\n}\r\n\r\n.input-field:focus {\r\n\tborder: 2px solid var(--accent);\r\n\tborder-left: 2px solid transparent;\r\n}\r\n\r\n#submit {\r\n\tbackground: var(--accent);\r\n\tcolor: white;\r\n\tborder: none;\r\n\tpadding: 1rem;\r\n\tcursor: pointer;\r\n\twidth: 100%;\r\n\topacity: 0.9;\r\n\tborder-radius: 8px;\r\n}\r\n\r\n#submit:hover {\r\n\topacity: 1;\r\n}\r\n'],sourceRoot:""}]);const s=a},645:r=>{r.exports=function(r){var n=[];return n.toString=function(){return this.map((function(n){var t=r(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(r,t,e){"string"==typeof r&&(r=[[null,r,""]]);var i={};if(e)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var s=0;s<r.length;s++){var c=[].concat(r[s]);e&&i[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},15:r=>{function n(r,n){(null==n||n>r.length)&&(n=r.length);for(var t=0,e=new Array(n);t<n;t++)e[t]=r[t];return e}r.exports=function(r){var t,e,i=(e=4,function(r){if(Array.isArray(r))return r}(t=r)||function(r,n){var t=r&&("undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"]);if(null!=t){var e,i,o=[],a=!0,s=!1;try{for(t=t.call(r);!(a=(e=t.next()).done)&&(o.push(e.value),!n||o.length!==n);a=!0);}catch(r){s=!0,i=r}finally{try{a||null==t.return||t.return()}finally{if(s)throw i}}return o}}(t,e)||function(r,t){if(r){if("string"==typeof r)return n(r,t);var e=Object.prototype.toString.call(r).slice(8,-1);return"Object"===e&&r.constructor&&(e=r.constructor.name),"Map"===e||"Set"===e?Array.from(r):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?n(r,t):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],a=i[3];if(!a)return o;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),A="/*# ".concat(c," */"),d=a.sources.map((function(r){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(r," */")}));return[o].concat(d).concat([A]).join("\n")}return[o].join("\n")}},379:r=>{var n=[];function t(r){for(var t=-1,e=0;e<n.length;e++)if(n[e].identifier===r){t=e;break}return t}function e(r,e){for(var o={},a=[],s=0;s<r.length;s++){var c=r[s],A=e.base?c[0]+e.base:c[0],d=o[A]||0,l="".concat(A," ").concat(d);o[A]=d+1;var u=t(l),C={css:c[1],media:c[2],sourceMap:c[3]};-1!==u?(n[u].references++,n[u].updater(C)):n.push({identifier:l,updater:i(C,e),references:1}),a.push(l)}return a}function i(r,n){var t=n.domAPI(n);return t.update(r),function(n){if(n){if(n.css===r.css&&n.media===r.media&&n.sourceMap===r.sourceMap)return;t.update(r=n)}else t.remove()}}r.exports=function(r,i){var o=e(r=r||[],i=i||{});return function(r){r=r||[];for(var a=0;a<o.length;a++){var s=t(o[a]);n[s].references--}for(var c=e(r,i),A=0;A<o.length;A++){var d=t(o[A]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}o=c}}},569:r=>{var n={};r.exports=function(r,t){var e=function(r){if(void 0===n[r]){var t=document.querySelector(r);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(r){t=null}n[r]=t}return n[r]}(r);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(t)}},216:r=>{r.exports=function(r){var n=document.createElement("style");return r.setAttributes(n,r.attributes),r.insert(n),n}},565:(r,n,t)=>{r.exports=function(r){var n=t.nc;n&&r.setAttribute("nonce",n)}},795:r=>{r.exports=function(r){var n=r.insertStyleElement(r);return{update:function(t){!function(r,n,t){var e=t.css,i=t.media,o=t.sourceMap;i?r.setAttribute("media",i):r.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(e+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(e,r)}(n,r,t)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(n)}}}},589:r=>{r.exports=function(r,n){if(n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}}},n={};function t(e){var i=n[e];if(void 0!==i)return i.exports;var o=n[e]={id:e,exports:{}};return r[e](o,o.exports,t),o.exports}t.n=r=>{var n=r&&r.__esModule?()=>r.default:()=>r;return t.d(n,{a:n}),n},t.d=(r,n)=>{for(var e in n)t.o(n,e)&&!t.o(r,e)&&Object.defineProperty(r,e,{enumerable:!0,get:n[e]})},t.o=(r,n)=>Object.prototype.hasOwnProperty.call(r,n),(()=>{var r=t(379),n=t.n(r),e=t(795),i=t.n(e),o=t(569),a=t.n(o),s=t(565),c=t.n(s),A=t(216),d=t.n(A),l=t(589),u=t.n(l),C=t(426),p={};p.styleTagTransform=u(),p.setAttributes=c(),p.insert=a().bind(null,"head"),p.domAPI=i(),p.insertStyleElement=d(),n()(C.Z,p),C.Z&&C.Z.locals&&C.Z.locals,document.querySelector("form");const f=document.getElementById("email"),m=document.getElementById("country"),v=document.getElementById("zip-code"),y=document.getElementById("password"),b=document.getElementById("confirm-password");function h(r,n){r.style.visibility="visible",n.style.visibility="hidden"}function B(r,n){r.style.visibility="hidden",n.style.visibility="visible"}f.addEventListener("blur",(()=>{const r=document.querySelector("#email-container .status-invalid"),n=document.querySelector("#email-container .status-valid");f.validity.typeMismatch||f.validity.valueMissing?h(r,n):B(r,n)})),m.addEventListener("blur",(()=>{const r=document.querySelector("#country-container .status-invalid"),n=document.querySelector("#country-container .status-valid");m.validity.tooLong||m.validity.valueMissing?h(r,n):B(r,n)})),v.addEventListener("blur",(()=>{const r=document.querySelector("#zip-code-container .status-invalid"),n=document.querySelector("#zip-code-container .status-valid");v.validity.tooLong||v.validity.valueMissing?h(r,n):B(r,n)})),y.addEventListener("blur",(()=>{const r=document.querySelector("#password-container .status-invalid"),n=document.querySelector("#password-container .status-valid");y.validity.valueMissing?h(r,n):B(r,n)})),b.addEventListener("blur",(()=>{document.querySelector("#confirm-password-container .status-invalid"),document.querySelector("#confirm-password-container .status-valid")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,